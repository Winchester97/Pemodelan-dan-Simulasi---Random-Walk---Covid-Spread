# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1spNIQ4ass18HHCsJCRjvqjaPlMWYxyMH
"""

import random
import numpy as np
from matplotlib import animation
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import host_subplot

#initialize variables
x_min = 0
x_max = 20
y_min = 0
y_max = 20  

n_particle = 200
n_iter = 80
inf_ratio=0.05
recovery_time=10
mov_chance=0.80

x_pos = np.zeros((n_particle,n_iter))
y_pos = np.zeros((n_particle,n_iter))
inf_n = np.zeros((n_particle,n_iter)) #array 2d berisi orang yang terinfeksi, baris = n_partikel, kolom = n_iter
infcount=np.zeros(n_iter)
day = np.arange(1,(n_iter+1),1)
        
#fungsi infect berguna untuk cek apakah ada 2 orang pada suatu waktu, berada pada koordinat yang sama
def infect(x_pos,y_pos,inf_n,n_particle,j,recovery_time):
    for a in range(n_particle):
        if inf_n[a][j]>0:
            for b in range(n_particle):
                if x_pos[a][j]==x_pos[b][j] and y_pos[a][j]==y_pos[b][j]:
                    if inf_n[b][j]==-1 :
                        inf_n[b][j]+=(recovery_time+1)
                                                                                  
#print format BUAT DEBUG AJA
def print_loc(n_particle,n_iter,x_pos,y_pos):
  print("")
  for i in range(n_particle):
    print("particle %i ([x],[y])"%(i+1),": { ", sep="")
    for j in range (n_iter):
      print ("#%d. "%(j+1),"[",x_pos[i][j],"]",",[",y_pos[i][j],"] ",sep="")
    print ("}")
    print("")

#BUAT DEBUG AJA
def print_inf(inf_n,n_particle,n_iter):
  print("")
  for i in range(n_particle):
    print("particle %i ([x],[y])"%(i+1),": { ", sep="")
    for j in range (n_iter):
      print ("#%d. "%(j+1),"[",inf_n[i][j],"]",sep="")
    print ("}")
    print("")

#PRINT JUMLAH ORANG YANG KEINFEKSI
def print_infect(inf_n,n_particle,n_iter):
  print("")
  for a in range(n_iter):
    infcount[a]=0
    for b in range(n_particle):
      if inf_n[b][a]>0:
        infcount[a]+=1
    print("day %a "%(a+1),": ",infcount[a])  
                                                                                                                                                                                                                                                                    
#Periodic Boundary Condition    
def pb_condition(x_pos,y_pos,x_max,x_min,i,j):                                                                                                                                                                                                                                                                                
  x_range = x_max - x_min
  y_range = y_max - y_min         
  if x_pos[i][j] > x_max:
    x_pos[i][j] -= x_range
  elif x_pos[i][j] < x_min:
    x_pos[i][j] += x_range
  if y_pos[i][j] > y_max:
    y_pos[i][j] -= y_range
  elif y_pos[i][j] < y_min:
    y_pos[i][j] += x_range
                                                                                                                                                                                                                                                                                                                                        
#graph visualization
def visualize_graph(n_particle,x_pos,y_pos):
  plt.title('Graph Random Walk')
  plt.grid(True)
  for i in range (n_particle):
    plt.plot(x_pos[i],y_pos[i], label ="Particle %i: "%((i+1),))                                                                                                                                                                                                                                                                                                                                                             
  plt.legend(loc = 'upper right', ncol=(i+1))
  plt.show()

#Generate location of x,y of n_particle for n_iteration        
def generate_loc(x_min,x_max,y_min,y_max,n_particle,n_iter,x_pos,y_pos,mov_chance,recovery_time):
    for j in range (0,n_iter):
        for i in range (n_particle):
            if(j==0): #line dibawah ini hanya digunakan untuk inisialisasi posisi awal x_pos, y_pos dari setiap partikel
                x_pos[i][0] = random.randrange(x_min,x_max) # artinya orang ke i, posisi x #0 atau pertama #Generate initial x_position per particle on random float betweeen x_min,x_max
                y_pos[i][0] = random.randrange(y_min,y_max) # artinya orang ke i, posisi y #0 atau pertama #Generate initial y_position per particle on random float betweeen y_min,y_max
                #line dibawah ini digunakan untuk cek kemungkinan suatu orang terinfeksi atau tidak
                ran = random.random()
                if(ran<=inf_ratio):
                  inf_n[i][0] = recovery_time #list baris ke i dan kolom pertama merepresentasikan orang ke i dan [0] merupakan posisi awal artinya si orang i ini dari awal udah keinfeksi virus
                else:
                  inf_n[i][0] = -1#orang ke i, dari posisi awal belum keinfeksi virus
            else:
            #pada line dibawah ini buat ngecek apakah pada iterasi sebelumnya, seseorang mulai terinfeksi, atau masih terinfeksi, atau sudah recover(sudah kebal)
            #-1 itu belum terinfeksi, int positif udah terinfeksi, 0 udah kebal
                if(inf_n[i][j-1]>0): 
                    inf_n[i][j]= inf_n[i][j-1]-1 #recover
                if(inf_n[i][j-1]==-1):
                    inf_n[i][j]=-1 #not yet infected
                if(random.random()<=mov_chance): #random disini digunakan untuk cek probabilitas suatu orang move or not 
                    rand = random.random() #generate random probabilities suatu orang move nya ke kanan, kiri, atas, atau bawah
                    if rand <= 0.25:
                        x_pos[i][j] = x_pos[i][j-1] + 1
                        y_pos[i][j] = y_pos[i][j-1]
                    elif rand <= 0.50:
                        x_pos[i][j] = x_pos[i][j-1]
                        y_pos[i][j] = y_pos[i][j-1] - 1
                    elif rand <= 0.75:
                        x_pos[i][j] = x_pos[i][j-1] - 1
                        y_pos[i][j] = y_pos[i][j-1]
                    else:
                        x_pos[i][j] = x_pos[i][j-1]
                        y_pos[i][j] = y_pos[i][j-1] + 1
                else:
                    x_pos[i][j] = x_pos[i][j-1]
                    y_pos[i][j] = y_pos[i][j-1]
                pb_condition(x_pos,y_pos,x_max,x_min,i,j) #checking boundary
        infect(x_pos,y_pos,inf_n,n_particle,j,recovery_time) #fungsi infect:cek apa ada dua orang yg di koordinat sama
      
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
    #print_loc(n_particle,n_iter,x_pos,y_pos) #print out x_pos & y_pos result (BUAT DEBUG AJA)
    print_infect(inf_n,n_particle,n_iter)
#  print_inf(inf_n,n_particle,n_iter)
    visualize_graph(n_particle,x_pos,y_pos) #generate graph visualization


generate_loc(x_min,x_max,y_min,y_max,n_particle,n_iter,x_pos,y_pos,mov_chance,recovery_time) #CALLING MAIN FUNCTION

#Visualize Animation
fig = plt.figure(num = 0, figsize = (12, 8))
fig.suptitle("Simulation Random Walk", fontsize=12)
ax01 = plt.subplot2grid((2, 2), (0, 0))
ax02 = plt.subplot2grid((2, 2), (0, 1))
ax01.set_xlim(x_min-1,x_max+1)
ax01.set_ylim(y_min-1,y_max+1)
ax01.grid(True)

ax02.set_xlim(0,len(day)+1)
ax02.set_ylim(-1,np.amax(infcount)+1)
ax02.set_xlabel('Days')
ax02.set_ylabel('total infected people')
ax02.grid(True)




models = dict() #used for creating variables dinamically

p12, = ax02.plot(day,infcount,'-b')
for i in range (n_particle):
  models["p"+str(i+1)], = ax01.plot(x_pos[i][0],y_pos[i][0],'o',c='b') #initialize initial x_pos, and y_pos in the figure
  if (inf_n[i][0] > 0):
      models["p"+str(i+1)], = ax01.plot(x_pos[i][0],y_pos[i][0],'o',c='r')
  elif (inf_n[i][0] < 0 ):
      models["p"+str(i+1)], = ax01.plot(x_pos[i][0],y_pos[i][0],'o',c='b')

def animate(j):
  p12.set_data(day[:j],infcount[:j])
  for i in range (n_particle):
    models["p"+str(i+1)].set_data(x_pos[i][j],y_pos[i][j]) #updating x_pos,y_pos to move
    if (inf_n[i][j] > 0):
        models["p"+str(i+1)].set_color('red')
    elif (inf_n[i][j] < 0 ):
        models["p"+str(i+1)].set_color('blue')
    else:
        models["p"+str(i+1)].set_color('blue')
  return ((models["p"+str(k+1)] for k in range (n_particle)),(p12))
anim = animation.FuncAnimation(fig, animate,frames=200, interval=100, blit=False,repeat=True)
